diff --git a/benchmarks/build_defs.bzl b/benchmarks/build_defs.bzl
index e3b412569..1aff896d5 100644
--- a/benchmarks/build_defs.bzl
+++ b/benchmarks/build_defs.bzl
@@ -5,6 +5,7 @@
 # license that can be found in the LICENSE file or at
 # https://developers.google.com/open-source/licenses/bsd
 
+load("@rules_cc//cc:cc_binary.bzl", "cc_binary")
 load("//bazel:cc_proto_library.bzl", "cc_proto_library")
 load("//bazel:proto_library.bzl", "proto_library")
 
@@ -22,7 +23,7 @@ def tmpl_cc_binary(name, gen, args, replacements = [], **kwargs):
     if _is_google3:
         kwargs["malloc"] = "@bazel_tools//tools/cpp:malloc"
         kwargs["features"] = ["-static_linking_mode"]
-    native.cc_binary(
+    cc_binary(
         name = name,
         srcs = srcs,
         **kwargs
diff --git a/python/build_targets.bzl b/python/build_targets.bzl
index 02d291c8e..37d044382 100644
--- a/python/build_targets.bzl
+++ b/python/build_targets.bzl
@@ -8,6 +8,8 @@ Most users should depend upon public aliases in the root:
     //:well_known_types_py_pb2
 """
 
+load("@rules_cc//cc:cc_binary.bzl", "cc_binary")
+load("@rules_cc//cc:cc_library.bzl", "cc_library")
 load("@rules_pkg//pkg:mappings.bzl", "pkg_files", "strip_prefix")
 load("@rules_python//python:defs.bzl", "py_library")
 load("//:protobuf.bzl", "internal_py_proto_library")
@@ -77,8 +79,7 @@ def build_targets(name):
         ],
         strip_prefix = "src",
     )
-
-    native.cc_binary(
+    cc_binary(
         name = "google/protobuf/internal/_api_implementation.so",
         srcs = ["google/protobuf/internal/api_implementation.cc"],
         copts = COPTS + [
@@ -109,8 +110,7 @@ def build_targets(name):
             "define": "allow_oversize_protos=true",
         },
     )
-
-    native.cc_binary(
+    cc_binary(
         name = "google/protobuf/pyext/_message.so",
         srcs = native.glob([
             "google/protobuf/pyext/*.cc",
@@ -447,8 +447,7 @@ def build_targets(name):
         name = "proto_json_test",
         srcs = ["google/protobuf/internal/proto_json_test.py"],
     )
-
-    native.cc_library(
+    cc_library(
         name = "proto_api",
         srcs = ["google/protobuf/proto_api.cc"],
         hdrs = ["google/protobuf/proto_api.h"],
diff --git a/python/py_extension.bzl b/python/py_extension.bzl
index 2afae61df..8603aba54 100644
--- a/python/py_extension.bzl
+++ b/python/py_extension.bzl
@@ -1,6 +1,7 @@
 """Macro to support py_extension """
 
 load("@bazel_skylib//lib:selects.bzl", "selects")
+load("@rules_cc//cc:cc_binary.bzl", "cc_binary")
 load("@rules_python//python:py_library.bzl", "py_library")
 
 def py_extension(name, srcs, copts, deps = [], **kwargs):
@@ -12,8 +13,7 @@ def py_extension(name, srcs, copts, deps = [], **kwargs):
       copts: List of C++ compile options to use
       deps: Libraries that the target depends on
     """
-
-    native.cc_binary(
+    cc_binary(
         name = name + "_binary",
         srcs = srcs,
         copts = copts + ["-fvisibility=hidden"],
diff --git a/src/google/protobuf/compiler/test_plugin_injection.bzl b/src/google/protobuf/compiler/test_plugin_injection.bzl
index 1ff815c62..3a0d51520 100644
--- a/src/google/protobuf/compiler/test_plugin_injection.bzl
+++ b/src/google/protobuf/compiler/test_plugin_injection.bzl
@@ -28,6 +28,7 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
+load("@rules_cc//cc:cc_library.bzl", "cc_library")
 load("//build_defs:cpp_opts.bzl", "COPTS")
 
 # This works around https://github.com/bazelbuild/bazel/issues/19124 by using a generated header to
@@ -57,8 +58,7 @@ EOF
         visibility = ["//visibility:private"],
         testonly = True,
     )
-
-    native.cc_library(
+    cc_library(
         name = name,
         hdrs = [hdr],
         strip_include_prefix = "/src",
diff --git a/upb_generator/bootstrap_compiler.bzl b/upb_generator/bootstrap_compiler.bzl
index 50eef63a3..cb1106f5d 100644
--- a/upb_generator/bootstrap_compiler.bzl
+++ b/upb_generator/bootstrap_compiler.bzl
@@ -1,5 +1,7 @@
 """Macros that implement bootstrapping for the upb code generator."""
 
+load("@rules_cc//cc:cc_binary.bzl", "cc_binary")
+load("@rules_cc//cc:cc_library.bzl", "cc_library")
 load(
     "//bazel:upb_minitable_proto_library.bzl",
     "upb_minitable_proto_library",
@@ -56,7 +58,7 @@ def bootstrap_cc_library(name, visibility = [], deps = [], bootstrap_deps = [],
           upb_proto_library().
     """
     for stage in _stages:
-        native.cc_library(
+        cc_library(
             name = name + stage,
             deps = deps + [dep + stage for dep in bootstrap_deps],
             visibility = _stage_visibility(stage, visibility),
@@ -80,7 +82,7 @@ def bootstrap_cc_binary(name, visibility = [], deps = [], bootstrap_deps = [], *
           upb_proto_library().
     """
     for stage in _stages:
-        native.cc_binary(
+        cc_binary(
             name = name + stage,
             deps = deps + [dep + stage for dep in bootstrap_deps],
             visibility = _stage_visibility(stage, visibility),
@@ -212,7 +214,7 @@ def bootstrap_upb_proto_library(
     _stage0_proto_staleness_test(name, src_files, src_rules, strip_prefix)
 
     # stage0 uses checked-in protos, and has no MiniTable.
-    native.cc_library(
+    cc_library(
         name = name + "_stage0",
         srcs = _generated_hdrs_and_srcs(src_files, "stage0", "upb"),
         hdrs = [bootstrap_hdr],
@@ -228,8 +230,7 @@ def bootstrap_upb_proto_library(
     # Generate stage1 protos (C API and MiniTables) using stage0 compiler.
     _generate_stage1_proto(name, src_files, src_rules, "upb", kwargs)
     _generate_stage1_proto(name, src_files, src_rules, "upb_minitable", kwargs)
-
-    native.cc_library(
+    cc_library(
         name = name + "_minitable_stage1",
         srcs = _generated_files(src_files, "stage1", "upb_minitable", "c"),
         hdrs = _generated_files(src_files, "stage1", "upb_minitable", "h"),
@@ -240,7 +241,7 @@ def bootstrap_upb_proto_library(
         ] + [dep + "_minitable_stage1" for dep in deps],
         **kwargs
     )
-    native.cc_library(
+    cc_library(
         name = name + "_stage1",
         srcs = _generated_files(src_files, "stage1", "upb", "h"),
         hdrs = [bootstrap_hdr],
@@ -259,7 +260,7 @@ def bootstrap_upb_proto_library(
         deps = proto_lib_deps,
         **kwargs
     )
-    native.cc_library(
+    cc_library(
         name = name,
         hdrs = [bootstrap_hdr],
         deps = [name + "_upb_proto"],
